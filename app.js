const { GoogleSpreadsheet } = require('google-spreadsheet');
var express = require('express');

async function app() {
  var app = express();
  // Initialize the sheet - doc ID is the long id in the sheets URL
  const doc = new GoogleSpreadsheet('1sVMH3Xm_NLt4trNHtEnSiH89NcAdaM0iwsNQDwPMOaw');

  // Initialize Auth - see https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication
  await doc.useServiceAccountAuth({
    // env var values are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    client_email: process.env.GOOGLE_CLIENT_EMAIL,
    private_key: process.env.GOOGLE_PRIVATE_KEY
  });

  await doc.loadInfo(); // loads document properties and worksheets

  const sheet = doc.sheetsByIndex[0];

  app.get('/', async function (req, res) {
    res.send('Healthy');
  });

  app.get('/pacients/:name',async function (req, res) {
    let rows = await sheet.getRows();
    res.send(
      rows.filter((row) => {
        return row["Nome completo do paciente"] == req.params.name
      }).map((row) => {
        return buildResponse(row)
      })
    );
  });

  app.get('/pacients', async function (req, res) {
    let rows = await sheet.getRows();
    console.log(rows);
    res.send(
      rows.map((row) => {
        return buildResponse(row)
      })
    );
  });

  app.listen((process.env.PORT || 5000), function () {
    console.log('server listening on port 3000!');
  });

  function buildResponse(row) {
    return {
      timestamp: row["Carimbo de data/hora"],
      hasHc: row["Você já é paciente do HC?"],
      whyIsHere: row["O que veio fazer no HC?"],
      typeOfConsult: row["A sua consulta foi agendada, é um encaixe ou nenhum dos dois?"]
    };
  }
}

app();
